#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DOT",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, Attribute, open) {
  AttributeSharpness = 0,
  AttributeBrightness = 1,
  AttributeContrast = 2,
  AttributeIntensityLevel = 3,
  AttributeShadow = 4,
  AttributeNoseShadow = 5,
  AttributeSpecularity = 6,
  AttributeEyeGaze = 7,
  AttributeEyeStatusRight = 8,
  AttributeEyeStatusLeft = 9,
  AttributeGlassStatus = 10,
  AttributeHeavyFrame = 11,
  AttributeBackgroundUniformity = 12,
  AttributeAge = 13,
  AttributeRedEyeRight = 14,
  AttributeRedEyeLeft = 15,
  AttributeRoll = 16,
  AttributeYaw = 17,
  AttributePitch = 18,
  AttributeGender = 19,
  AttributeSegmentationMask = 20,
  AttributeCrop = 21,
  AttributeTemplate = 22,
  AttributeEyeDistance = 23,
  AttributeConfidence = 24,
  AttributeMounthStatus = 25,
};


SWIFT_CLASS("_TtC3DOT14AttributeScore")
@interface AttributeScore : NSObject
@property (nonatomic, readonly) enum Attribute attribute;
@property (nonatomic, readonly) double value;
- (nonnull instancetype)initWithAttribute:(enum Attribute)attribute OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAttribute:(enum Attribute)attribute value:(double)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT16AttributeWrapper")
@interface AttributeWrapper : NSObject
- (nonnull instancetype)initWithAttribute:(enum Attribute)attribute OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CaptureSide, open) {
  CaptureSideFront = 0,
  CaptureSideBack = 1,
};

typedef SWIFT_ENUM(NSInteger, CropMethod, open) {
  CropMethodTokenFrontal = 0,
  CropMethodFullFrontal = 1,
  CropMethodFrontalExtended = 2,
};


/// Class handling camera usage
SWIFT_CLASS("_TtC3DOT9DOTCamera")
@interface DOTCamera : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVCaptureOutput;
@class AVCaptureConnection;

@interface DOTCamera (SWIFT_EXTENSION(DOT)) <AVCaptureVideoDataOutputSampleBufferDelegate>
/// Receives sampleBuffer converted to Image and croped to current preview size. Result image is sent to DOTCameraDelegate
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end

@class AVCapturePhotoOutput;
@class AVCapturePhoto;
@class AVCaptureResolvedPhotoSettings;
@class AVCaptureBracketedStillImageSettings;

@interface DOTCamera (SWIFT_EXTENSION(DOT)) <AVCapturePhotoCaptureDelegate>
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishProcessingPhoto:(AVCapturePhoto * _Nonnull)photo error:(NSError * _Nullable)error SWIFT_AVAILABILITY(ios,introduced=11.0);
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output willCapturePhotoForResolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings;
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishProcessingPhotoSampleBuffer:(CMSampleBufferRef _Nullable)photoSampleBuffer previewPhotoSampleBuffer:(CMSampleBufferRef _Nullable)previewPhotoSampleBuffer resolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings bracketSettings:(AVCaptureBracketedStillImageSettings * _Nullable)bracketSettings error:(NSError * _Nullable)error SWIFT_AVAILABILITY(ios,introduced=10.0);
@end


SWIFT_CLASS("_TtC3DOT12DOTDimension")
@interface DOTDimension : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum LogLevel : NSInteger;
@class NSBundle;
@class License;
@class DOTCameraAuthorizationStatus;
enum Feature : NSInteger;

/// Type containg basic functions for IFace/DOT configuration
SWIFT_CLASS("_TtC3DOT10DOTHandler")
@interface DOTHandler : NSObject
/// Prints some basic information to console based on specific LogLevel type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum LogLevel logLevel;)
+ (enum LogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum LogLevel)value;
/// Set the bundle for localizable strings
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nonnull localizationBundle;)
+ (NSBundle * _Nonnull)localizationBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationBundle:(NSBundle * _Nonnull)value;
/// To work with DOT library you need to initialize whole IFace framework using <em>license</em> or without license. In most cases you need license to make the whole DOT framework run.
/// \param license Optional parameter which contains licensing data obtained from <em>.lic</em>  file.
///
/// \param faceDetectionConfidenceThreshold Face detection confidence threshold. Value in interval 0-10000. Default is 600.
///
+ (void)initializeWith:(License * _Nullable)license faceDetectionConfidenceThreshold:(NSInteger)faceDetectionConfidenceThreshold;
/// To work with DOT library you need to initialize whole IFace framework using <em>license</em> or without license. In most cases you need license to make the whole DOT framework run.
/// \param license Optional parameter which contains licensing data obtained from <em>.lic</em>  file.
///
/// \param faceDetectionConfidenceThreshold Face detection confidence threshold. Value in interval 0-10000. Default is 600.
///
+ (void)initializeWith:(License * _Nullable)license;
/// In case you want to stop working with DOT, you have to manually call this method to deinitialize it. It will freed up your memory from DOT/iFace instances
+ (void)deinitialize;
/// Checks authorization status of Camera
///
/// returns:
/// <code>nil</code> if not determined, <code>status</code> other
+ (DOTCameraAuthorizationStatus * _Nullable)authorizeCameraOnRequestAccess:(void (^ _Nullable)(AVAuthorizationStatus))onRequestAccess SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// License ID used for generating license file.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable licenseId;)
+ (NSString * _Nullable)licenseId SWIFT_WARN_UNUSED_RESULT;
+ (void)setLicenseId:(NSString * _Nullable)value;
///
/// returns:
/// Description of the attribute
+ (NSString * _Nonnull)attributeDescription:(enum Attribute)attr SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Description of the feature
+ (NSString * _Nonnull)featureDescription:(enum Feature)feature SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// <ol>
///   <li>
///     case <em>error</em> - prints only error messages with error specification and number (IFaceError)
///   </li>
///   <li>
///     case <em>verbose</em> - prints everything, even successful function call. For example when you call method <code>initialize(with: License)</code>
///   </li>
///   <li>
///     case <em>none</em> - will not print any logs based on DOT framework
///   </li>
/// </ol>
typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelError = 0,
  LogLevelVerbose = 1,
  LogLevelNone = 2,
};


SWIFT_CLASS("_TtCC3DOT10DOTHandler28DOTCameraAuthorizationStatus")
@interface DOTCameraAuthorizationStatus : NSObject
@property (nonatomic, readonly) AVAuthorizationStatus authorizationStatus;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIImage;

SWIFT_CLASS("_TtC3DOT8DOTImage")
@interface DOTImage : NSObject
@property (nonatomic, copy) NSData * _Nonnull data;
@property (nonatomic, copy) NSDate * _Nonnull captureTimeInterval;
@property (nonatomic, readonly, strong) DOTDimension * _Nonnull dimenstion;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
- (nullable instancetype)initWithImage:(UIImage * _Nonnull)image error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC3DOT15DOTImageWrapper")
@interface DOTImageWrapper : NSObject
@property (nonatomic, readonly, strong) DOTImage * _Nullable dotImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Configuration;
@class UIViewController;
@class NSCoder;

SWIFT_CLASS("_TtC3DOT23DOTNavigationController")
@interface DOTNavigationController : UINavigationController
+ (DOTNavigationController * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
+ (DOTNavigationController * _Nonnull)createWithConfiguration:(Configuration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface DOTNavigationController (SWIFT_EXTENSION(DOT))
@end

@class UIColor;

/// In case of customizing the NavigationController inside StepCoordinators
SWIFT_CLASS("_TtCC3DOT23DOTNavigationController13Configuration")
@interface Configuration : NSObject
/// Black
@property (nonatomic) UIBarStyle barStyle;
/// navBackgroundColor
@property (nonatomic, strong) UIColor * _Nonnull barTintColor;
/// White
@property (nonatomic, strong) UIColor * _Nonnull tintColor;
/// White
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBarStyle:(UIBarStyle)barStyle barTintColor:(UIColor * _Nonnull)barTintColor tintColor:(UIColor * _Nonnull)tintColor titleColor:(UIColor * _Nonnull)titleColor OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC3DOT8DOTPoint")
@interface DOTPoint : NSObject
@property (nonatomic, readonly) double x;
@property (nonatomic, readonly) double y;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum DOTSegmentPosition : NSInteger;

SWIFT_CLASS("_TtC3DOT10DOTSegment")
@interface DOTSegment : NSObject
@property (nonatomic, readonly) enum DOTSegmentPosition position;
@property (nonatomic, readonly) NSInteger duration;
- (nonnull instancetype)initWithTargetPosition:(enum DOTSegmentPosition)targetPosition duration:(NSInteger)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, DOTSegmentPosition, open) {
  DOTSegmentPositionTopLeft = 0,
  DOTSegmentPositionTopRight = 1,
  DOTSegmentPositionBottomLeft = 2,
  DOTSegmentPositionBottomRight = 3,
};

@class Face;
@class Template;
@class IcaoAttribute;
@class FeatureWrapper;
@class FeaturePoint;

SWIFT_CLASS("_TtC3DOT12DetectedFace")
@interface DetectedFace : NSObject
@property (nonatomic, readonly, strong) Face * _Nonnull face;
@property (nonatomic, readonly) NSInteger eyeDistance;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable eyeLeft;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable eyeRight;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable noseTip;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable mouthLeftCorner;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable mouthRightCorner;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable faceCenter;
@property (nonatomic, readonly, strong) DOTImage * _Nonnull image;
@property (nonatomic, strong) UIImage * _Nullable cropedFace;
@property (nonatomic, readonly) double confidence;
@property (nonatomic, readonly, strong) Template * _Nullable faceTemplate;
- (NSArray<IcaoAttribute *> * _Nonnull)attributes:(NSArray<AttributeWrapper *> * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FeaturePoint *> * _Nonnull)features:(NSArray<FeatureWrapper *> * _Nonnull)features SWIFT_WARN_UNUSED_RESULT;
- (void)deinitialize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





typedef SWIFT_ENUM(NSInteger, DotPosition, open) {
  DotPositionCenter = -1,
  DotPositionTopLeft = 0,
  DotPositionTopRight = 1,
  DotPositionBottomLeft = 2,
  DotPositionBottomRight = 3,
};

@class Rectangle;

SWIFT_CLASS("_TtC3DOT4Face")
@interface Face : NSObject
- (AttributeScore * _Nullable)attributeScore:(enum Attribute)attr SWIFT_WARN_UNUSED_RESULT;
- (NSArray<IcaoAttribute *> * _Nonnull)attributes:(NSArray<AttributeWrapper *> * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FeaturePoint *> * _Nonnull)features:(NSArray<FeatureWrapper *> * _Nonnull)features SWIFT_WARN_UNUSED_RESULT;
- (Rectangle * _Nullable)cropFaceRectWithCropMethod:(enum CropMethod)cropMethod SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Contains configuration parameters for FaceCaptureController like requestFullCapture, showCheckAnimation etc.
SWIFT_CLASS("_TtC3DOT24FaceCaptureConfiguration")
@interface FaceCaptureConfiguration : NSObject
/// [0.1] Ratio used for calculating minimal face size in image
@property (nonatomic) double minFaceSizeRatio;
/// [0.34] Ratio used for calculating maximal face size in image
@property (nonatomic) double maxFaceSizeRatio;
/// [false] Indicates which instruction texts should be used for process
@property (nonatomic) BOOL useAlternativeInstructions;
/// [false] In case your final captured candidate should contain captured full image
@property (nonatomic) BOOL requestFullImage;
/// [false] In case your final captured candidate should contain captured crop image
@property (nonatomic) BOOL requestCropImage;
/// [false] In case your final captured candidate should contain captured crop image
@property (nonatomic) BOOL requestTemplate;
/// [true] Indicates if tick animation should be performed after succesfull capture
@property (nonatomic) BOOL showCheckAnimation;
/// [.front] Indcates which camera should be used. Options are front/back.
@property (nonatomic) AVCaptureDevicePosition cameraPosition;
/// [0.3] Light score threshold to accept face image from camera
@property (nonatomic) double lightScoreThreshold;
/// Use this class to configure face capture step
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Use this class to configure face capture step
/// \param minFaceSizeRatio [0.1] ratio used for calculating minimal face size in image
///
/// \param maxFaceSizeRatio [0.34] ratio used for calculating maximal face size in image
///
/// \param showCheckAnimation [true] indicates if tick animation should be performed after succesfull capture
///
/// \param useAlternativeInstructions [false] indicates which instruction texts should be used for process
///
/// \param requestFullImage [false] in case your final captured candidate should contain captured full image
///
/// \param requestCropImage [false] in case your final captured candidate should contain captured crop image
///
/// \param requestTemplate [false] in case your final captured candidate should contain template
///
/// \param cameraPosition [.front] indcates which camera should be used. Options are front/back
///
/// \param lightScoreThreshold [0.3] Light score threshold to accept face image from camera.
///
- (nonnull instancetype)initWithMinFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio useAlternativeInstructions:(BOOL)useAlternativeInstructions requestFullImage:(BOOL)requestFullImage requestCropImage:(BOOL)requestCropImage requestTemplate:(BOOL)requestTemplate showCheckAnimation:(BOOL)showCheckAnimation lightScoreThreshold:(double)lightScoreThreshold cameraPosition:(AVCaptureDevicePosition)cameraPosition OBJC_DESIGNATED_INITIALIZER;
/// Use this class to configure face capture step
/// \param builder builder closure
///
/// \param minFaceSizeRatio [0.1] ratio used for calculating minimal face size in image
///
/// \param maxFaceSizeRatio [0.34] ratio used for calculating maximal face size in image
///
/// \param showCheckAnimation [true] indicates if tick animation should be performed after succesfull capture
///
/// \param useAlternativeInstructions [false] indicates which instruction texts should be used for process
///
/// \param requestFullImage [false] in case your final captured candidate should contain captured full image
///
/// \param requestCropImage [false] in case your final captured candidate should contain captured crop image
///
/// \param requestTemplate [false] in case your final captured candidate should contain template
///
/// \param cameraPosition [.front] indcates which camera should be used. Options are front/back
///
/// \param lightScoreThreshold [0.3] Light score threshold to accept face image from camera.
///
- (nonnull instancetype)init:(SWIFT_NOESCAPE void (^ _Nonnull)(FaceCaptureConfiguration * _Nonnull))builderBlock OBJC_DESIGNATED_INITIALIZER;
@end

@protocol FaceCaptureControllerDelegate;
@class FaceCaptureStyle;

/// Class with instructions for obtaining quality image suitable for verification
SWIFT_CLASS("_TtC3DOT21FaceCaptureController")
@interface FaceCaptureController : UIViewController
@property (nonatomic, weak) id <FaceCaptureControllerDelegate> _Nullable delegate;
/// Use this method in case of creating instance of FaceCaptureController
/// \param configuration Contains configuration parameters for FaceCaptureController like requestFullCapture, showCheckAnimation etc.
///
+ (FaceCaptureController * _Nonnull)createWithConfiguration:(FaceCaptureConfiguration * _Nonnull)configuration style:(FaceCaptureStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Should be called in case you want to start process for capturing candidate
- (void)requestFaceCapture;
/// Should be called in case you want to stop/pause process for capturing candidate
- (void)stopFaceCapture;
/// Should be called in case you want to reset state of controller to default values and start from the scratch
- (void)resetController;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end





@class UITraitCollection;

@interface FaceCaptureController (SWIFT_EXTENSION(DOT))
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end





@class FaceCaptureImage;
enum FaceCaptureState : NSInteger;

/// Delegate protocol of FaceCaptureController
SWIFT_PROTOCOL("_TtP3DOT29FaceCaptureControllerDelegate_")
@protocol FaceCaptureControllerDelegate
@optional
- (void)faceCaptureDidLoad:(FaceCaptureController * _Nonnull)controller;
- (void)faceCaptureDidAppear:(FaceCaptureController * _Nonnull)controller;
- (void)faceCaptureWillAppear:(FaceCaptureController * _Nonnull)controller;
- (void)faceCaptureWillDisappear:(FaceCaptureController * _Nonnull)controller;
- (void)faceCaptureDidDisappear:(FaceCaptureController * _Nonnull)controller;
/// Tells the delegate that camera init has failed
- (void)faceCaptureCameraInitFailed:(FaceCaptureController * _Nonnull)controller;
/// Tells the delegate that you have no parmissions for camera usage
- (void)faceCaptureNoCameraPermission:(FaceCaptureController * _Nonnull)controller;
@required
/// Tells the delegate that successful candidate was captured by FaceCapture Process
- (void)faceCapture:(FaceCaptureController * _Nonnull)controller didCapture:(FaceCaptureImage * _Nonnull)faceCaptureImage;
/// Tells the delegate that it was not possible to capture cadidate
- (void)faceCaptureDidFailed:(FaceCaptureController * _Nonnull)controller;
@optional
/// Tells the delegate that the step of capturing the face has changed
- (void)faceCapture:(FaceCaptureController * _Nonnull)controller stateChanged:(enum FaceCaptureState)state withImage:(DOTImage * _Nullable)image;
/// Tells the delegate that the preview size has changed
- (void)faceCapture:(FaceCaptureController * _Nonnull)controller previewSizeChanged:(CGSize)size;
@end


SWIFT_CLASS("_TtC3DOT16FaceCaptureImage")
@interface FaceCaptureImage : NSObject
@property (nonatomic, readonly, strong) Template * _Nullable faceTemplate;
@property (nonatomic, readonly, strong) UIImage * _Nullable croppedImage;
@property (nonatomic, readonly, strong) UIImage * _Nullable fullImage;
- (nonnull instancetype)initWithTemplate:(Template * _Nullable)template_ croppedImage:(UIImage * _Nullable)croppedImage fullImage:(UIImage * _Nullable)fullImage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT30FaceCaptureSimpleConfiguration")
@interface FaceCaptureSimpleConfiguration : NSObject
/// [0.1] ratio used for calculating minimal face size in image
@property (nonatomic) double minFaceSizeRatio;
/// [0.34] ratio used for calculating maximal face size in image
@property (nonatomic) double maxFaceSizeRatio;
/// [false] in case your final captured candidate should contain captured full image
@property (nonatomic) BOOL requestFullImage;
/// [false] in case your final captured candidate should contain captured crop image
@property (nonatomic) BOOL requestCropImage;
/// [false] in case your final captured candidate should contain template
@property (nonatomic) BOOL requestTemplate;
/// [.front] indcates which camera should be used. Options are front/back.
@property (nonatomic) AVCaptureDevicePosition cameraPosition;
/// Use this method in case of default implementation of configuration for  FaceCaptureSimpleController
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Use this method in case of modifing FaceCaptureSimpleController configuration
/// \param minFaceSizeRatio [0.1] ratio used for calculating minimal face size in image
///
/// \param maxFaceSizeRatio [0.34] ratio used for calculating maximal face size in image
///
/// \param requestFullImage [false] in case your final captured candidate should contain captured full image
///
/// \param requestCropImage [false] in case your final captured candidate should contain captured crop image
///
/// \param requestTemplate [false] in case your final captured candidate should contain template
///
/// \param cameraPosition [.front] indcates which camera should be used. Options are front/back.
///
- (nonnull instancetype)initWithMinFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio requestFullImage:(BOOL)requestFullImage requestCropImage:(BOOL)requestCropImage requestTemplate:(BOOL)requestTemplate cameraPosition:(AVCaptureDevicePosition)cameraPosition OBJC_DESIGNATED_INITIALIZER;
/// Use this method in case of modifing FaceCaptureSimpleController configuration
/// \param minFaceSizeRatio [0.1] ratio used for calculating minimal face size in image
///
/// \param maxFaceSizeRatio [0.34] ratio used for calculating maximal face size in image
///
/// \param requestFullImage [false] in case your final captured candidate should contain captured full image
///
/// \param requestCropImage [false] in case your final captured candidate should contain captured crop image
///
/// \param requestTemplate [false] in case your final captured candidate should contain template
///
/// \param cameraPosition [.front] indcates which camera should be used. Options are front/back.
///
- (nonnull instancetype)init:(SWIFT_NOESCAPE void (^ _Nonnull)(FaceCaptureSimpleConfiguration * _Nonnull))builderBlock OBJC_DESIGNATED_INITIALIZER;
@end

@protocol FaceCaptureSimpleControllerDelegate;
@class FaceCaptureSimpleStyle;

/// Class without instructions for obtaining image suitable for verification.
SWIFT_CLASS("_TtC3DOT27FaceCaptureSimpleController")
@interface FaceCaptureSimpleController : UIViewController
@property (nonatomic, weak) id <FaceCaptureSimpleControllerDelegate> _Nullable delegate;
/// Use this method in case of creating instance of FaceCaptureSimpleController
/// \param minFaceSizeRatio ratio used for calculating minimal face size in image
///
/// \param maxFaceSizeRatio ratio used for calculating maximal face size in image
///
/// \param requestFullImage in case your final captured candidate should contain captured full image
///
/// \param requestCropImage in case your final captured candidate should contain captured crop image
///
/// \param requestTemplate in case your final captured candidate should contain template
///
/// \param cameraPosition indcates which camera should be used. Options are front/back.
///
/// \param style In case you want to customize style/colors of controller’s components use this property.
///
+ (FaceCaptureSimpleController * _Nonnull)createWithConfiguration:(FaceCaptureSimpleConfiguration * _Nonnull)configuration style:(FaceCaptureSimpleStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Should be called in case you want to start process for capturing candidate
- (void)requestFaceCapture;
/// Should be called in case you want to stop/pause process for capturing candidate
- (void)stopFaceCapture;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end










@interface FaceCaptureSimpleController (SWIFT_EXTENSION(DOT))
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end


/// Delegate protocol of FaceCaptureSimpleController
SWIFT_PROTOCOL("_TtP3DOT35FaceCaptureSimpleControllerDelegate_")
@protocol FaceCaptureSimpleControllerDelegate
@optional
- (void)faceCaptureSimpleDidLoad:(FaceCaptureSimpleController * _Nonnull)controller;
- (void)faceCaptureSimpleDidAppear:(FaceCaptureSimpleController * _Nonnull)controller;
- (void)faceCaptureSimpleWillAppear:(FaceCaptureSimpleController * _Nonnull)controller;
- (void)faceCaptureSimpleDidDisappear:(FaceCaptureSimpleController * _Nonnull)controller;
- (void)faceCaptureSimpleWillDisappear:(FaceCaptureSimpleController * _Nonnull)controller;
/// Tells the delegate that camera init has failed
- (void)faceCaptureSimpleCameraInitFailed:(FaceCaptureSimpleController * _Nonnull)controller;
/// Tells the delegate that you have no parmissions for camera usage
- (void)faceCaptureSimpleNoCameraPermission:(FaceCaptureSimpleController * _Nonnull)controller;
@required
/// Tells the delegate that successful candidate was captured by FaceCapture Process
- (void)faceCaptureSimple:(FaceCaptureSimpleController * _Nonnull)controller didCapture:(FaceCaptureImage * _Nonnull)faceCaptureSimpleImage;
/// Tells the delegate that it was not possible to capture cadidate
- (void)faceCaptureSimpleDidFailed:(FaceCaptureSimpleController * _Nonnull)controller;
@optional
/// Tells the delegate that the preview size has changed
- (void)faceCaptureSimple:(FaceCaptureSimpleController * _Nonnull)controller previewSizeChanged:(CGSize)size;
@end


SWIFT_CLASS("_TtC3DOT22FaceCaptureSimpleStyle")
@interface FaceCaptureSimpleStyle : NSObject
@property (nonatomic, strong) UIColor * _Nonnull background;
@property (nonatomic, strong) UIColor * _Nonnull trackingCircleOutline;
@property (nonatomic, strong) UIColor * _Nonnull trackingCircleBackground;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackground:(UIColor * _Nonnull)background trackingCircleOutline:(UIColor * _Nonnull)trackingCircleOutline trackingCircleBackground:(UIColor * _Nonnull)trackingCircleBackground OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FaceCaptureState, open) {
  FaceCaptureStatePresenceStep = 0,
  FaceCaptureStatePositionStep = 1,
  FaceCaptureStateLightStep = 2,
  FaceCaptureStateCapturingStep = 3,
  FaceCaptureStateDoneStep = 4,
};

@class UIFont;

SWIFT_CLASS("_TtC3DOT16FaceCaptureStyle")
@interface FaceCaptureStyle : NSObject
@property (nonatomic, strong) UIColor * _Nonnull background;
@property (nonatomic, strong) UIColor * _Nonnull backgroundOverlay;
@property (nonatomic, strong) UIColor * _Nonnull circleOutline;
@property (nonatomic, strong) UIColor * _Nonnull trackingCircleOutline;
@property (nonatomic, strong) UIColor * _Nonnull trackingCircleBackground;
@property (nonatomic, strong) UIColor * _Nonnull progressValid;
@property (nonatomic, strong) UIColor * _Nonnull progressIntermediate;
@property (nonatomic, strong) UIColor * _Nonnull progressInvalid;
@property (nonatomic, strong) UIColor * _Nonnull tick;
@property (nonatomic, strong) UIFont * _Nonnull font;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackground:(UIColor * _Nonnull)background backgroundOverlay:(UIColor * _Nonnull)backgroundOverlay circleOutline:(UIColor * _Nonnull)circleOutline trackingCircleOutline:(UIColor * _Nonnull)trackingCircleOutline trackingCircleBackground:(UIColor * _Nonnull)trackingCircleBackground progressValid:(UIColor * _Nonnull)progressValid progressIntermediate:(UIColor * _Nonnull)progressIntermediate progressInvalid:(UIColor * _Nonnull)progressInvalid tick:(UIColor * _Nonnull)tick font:(UIFont * _Nonnull)font OBJC_DESIGNATED_INITIALIZER;
@end

@class FaceImage;

SWIFT_CLASS("_TtC3DOT12FaceDetector")
@interface FaceDetector : NSObject
/// Detect list of faces from image
/// \param image Face image
///
/// \param maximumFaces Int
///
///
/// returns:
/// list of detected faces
- (NSArray<DetectedFace *> * _Nonnull)detectFaces:(FaceImage * _Nonnull)image maximumFaces:(NSInteger)maximumFaces SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC3DOT9FaceImage")
@interface FaceImage : NSObject
/// Create FaceImage from UIImage and face size ratio
/// \param image face image
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
/// Create FaceImage from UIImage and face distance ratios
/// \param image face image
///
/// \param minFaceSizeRatio [0.02] minimum face size ratio. This defines size of searched face in the image.
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image minFaceSizeRatio:(double)minFaceSizeRatio OBJC_DESIGNATED_INITIALIZER;
/// Create FaceImage from UIImage and face distance ratios
/// \param image face image
///
/// \param maxFaceSizeRatio [0.5] maximum face size ratio. This defines size of searched face in the image
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image maxFaceSizeRatio:(double)maxFaceSizeRatio OBJC_DESIGNATED_INITIALIZER;
/// Create FaceImage from UIImage and face distance ratios
/// \param image face image
///
/// \param minFaceSizeRatio [0.02] minimum face size ratio. This defines size of searched face in the image.
///
/// \param maxFaceSizeRatio [0.5] maximum face size ratio. This defines size of searched face in the image
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image minFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

SWIFT_CLASS("_TtC3DOT17FaceImageVerifier")
@interface FaceImageVerifier : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Verify list of face images against reference face image.
/// \param referenceFaceImage Face image
///
/// \param probeFaceImages Face image list
///
///
/// returns:
/// list of matching scores for each face image
- (NSArray<NSNumber *> * _Nullable)matchWithReferenceFaceImage:(FaceImage * _Nonnull)referenceFaceImage probeFaceImages:(NSArray<FaceImage *> * _Nonnull)probeFaceImages error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Verify list of face images against reference face template.
/// \param referenceFaceTemplate Face template
///
/// \param probeFaceImages Face image list
///
///
/// returns:
/// list of matching scores for each face image
- (NSArray<NSNumber *> * _Nullable)matchWithReferenceTemplate:(Template * _Nonnull)referenceFaceTemplate probeFaceImages:(NSArray<FaceImage *> * _Nonnull)probeFaceImages error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Verify face image against reference face image.
/// \param referenceFaceImage Face image
///
/// \param probeFaceImage Face image
///
///
/// returns:
/// matching score
- (NSNumber * _Nullable)matchWithReferenceFaceImage:(FaceImage * _Nonnull)referenceFaceImage probeFaceImage:(FaceImage * _Nonnull)probeFaceImage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Verify face image against reference face image.
/// \param referenceFaceTemplate Face template
///
/// \param probeFaceImage Face image
///
///
/// returns:
/// matching score
- (NSNumber * _Nullable)matchWithReferenceTemplate:(Template * _Nonnull)referenceFaceTemplate probeFaceImage:(FaceImage * _Nonnull)probeFaceImage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, FaceTemplateError, open) {
  FaceTemplateErrorVersionNotSupported = 0,
  FaceTemplateErrorTemplateIncompatible = 1,
  FaceTemplateErrorTemplateCorrupted = 2,
  FaceTemplateErrorOther = 3,
};
static NSString * _Nonnull const FaceTemplateErrorDomain = @"DOT.FaceTemplateError";

@protocol FaceVerifierDelegate;

SWIFT_CLASS("_TtC3DOT12FaceVerifier") SWIFT_DEPRECATED_MSG("Use `TemplateVerifier` or `LivenessImageVerifier` instead.")
@interface FaceVerifier : NSObject
@property (nonatomic, weak) id <FaceVerifierDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)verifyWithProbeTemplate:(Template * _Nonnull)probeTemplate referenceTemplate:(Template * _Nonnull)referenceTemplate threshold:(float)threshold templateId:(NSInteger)templateId;
- (void)verifyWithProbeImage:(FaceImage * _Nonnull)probeImage referenceTemplate:(Template * _Nonnull)referenceTemplate threshold:(float)threshold templateId:(NSInteger)templateId;
- (BOOL)verifyIfAvailableWithProbeImage:(FaceImage * _Nonnull)probeImage referenceTemplate:(Template * _Nonnull)referenceTemplate threshold:(float)threshold checkMultipleFaces:(BOOL)checkMultipleFaces templateId:(NSInteger)templateId;
- (void)verifyWithProbeImage:(FaceImage * _Nonnull)probeImage referenceImage:(FaceImage * _Nonnull)referenceImage threshold:(float)threshold templateId:(NSInteger)templateId;
- (BOOL)verifyIfAvailableWithProbeImage:(FaceImage * _Nonnull)probeImage referenceImage:(FaceImage * _Nonnull)referenceImage threshold:(float)threshold checkMultipleFaces:(BOOL)checkMultipleFaces templateId:(NSInteger)templateId;
@end


SWIFT_PROTOCOL("_TtP3DOT20FaceVerifierDelegate_") SWIFT_DEPRECATED_MSG("Use `TemplateVerifier` or `LivenessImageVerifier` instead.")
@protocol FaceVerifierDelegate
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier verifiedTemplate:(NSInteger)templateId score:(float)score;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier notVerifiedTemplate:(NSInteger)templateId score:(float)score;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier incompatibleTemplateId:(NSInteger)templateId;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier faceNotFoundOnProbe:(NSInteger)templateId;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier faceNotFoundOnReference:(NSInteger)templateId;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier multipleFaceFoundOnProbe:(NSInteger)count templateId:(NSInteger)templateId;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier multipleFaceFoundOnReference:(NSInteger)count templateId:(NSInteger)templateId;
@end

typedef SWIFT_ENUM(NSInteger, Feature, open) {
  FeatureRightEyeOuterCorner = 0,
  FeatureRightEyeCenter = 1,
  FeatureRightEyeInnerCorner = 2,
  FeatureLeftEyeOuterCorner = 3,
  FeatureLeftEyeCenter = 4,
  FeatureLeftEyeInnerCorner = 5,
  FeatureNoseTip = 6,
  FeatureMouthRightCorner = 7,
  FeatureMouthCenter = 8,
  FeatureMouthLeftCorner = 9,
  FeatureMouthUpperEdge = 10,
  FeatureMouthLowerEdge = 11,
  FeatureRightEyebrowOuterEdge = 12,
  FeatureRightEyebrowInnerEdge = 13,
  FeatureLeftEyebrowOuterEdge = 14,
  FeatureLeftEyebrowInnerEdge = 15,
  FeatureFaceRightEdge = 16,
  FeatureFaceChinTip = 17,
  FeatureFaceLeftEdge = 18,
};


SWIFT_CLASS("_TtC3DOT12FeaturePoint")
@interface FeaturePoint : NSObject
@property (nonatomic, readonly) enum Feature feature;
@property (nonatomic, readonly, strong) DOTPoint * _Nonnull point;
@property (nonatomic, readonly) float score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT14FeatureWrapper")
@interface FeatureWrapper : NSObject
- (nonnull instancetype)initWithFeature:(enum Feature)feature OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum IcaoRangeStatus : NSInteger;

SWIFT_CLASS("_TtC3DOT13IcaoAttribute")
@interface IcaoAttribute : NSObject
@property (nonatomic, readonly, strong) AttributeScore * _Nonnull score;
@property (nonatomic, readonly) BOOL fulfilled;
@property (nonatomic, readonly) enum IcaoRangeStatus rangeStatus;
@property (nonatomic, readonly) BOOL available;
@property (nonatomic, readonly) enum Attribute attribute;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, IcaoRangeStatus, open) {
  IcaoRangeStatusNone = -2,
  IcaoRangeStatusTooLow = -1,
  IcaoRangeStatusInRange = 0,
  IcaoRangeStatusTooHigh = 1,
};


/// Create this object for usage in DOT initialization method <code>DOT.initialize(from: License)</code>.
/// License instance parse data to valid format used in IFace framework.
/// <h3>Usage Example:</h3>
/// \code
/// if let path = Bundle.main.path(forResource: "lic_file", ofType: "lic") {
///    do {
///        let license = try License(path: path)
///        DOT.initialize(with: license)
///    } catch {
///        print(error)
///    }
/// }
///
/// \endcode
SWIFT_CLASS("_TtC3DOT7License")
@interface License : NSObject
/// \param path Path to <em>.lic</em> file stored in project directory.
///
- (nullable instancetype)initWithPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TransitionType : NSInteger;

SWIFT_CLASS("_TtC3DOT22Liveness2Configuration")
@interface Liveness2Configuration : NSObject
@property (nonatomic) enum CaptureSide captureSide;
/// Default value is front
@property (nonatomic) enum TransitionType transitionType;
/// Default value is nil
@property (nonatomic, copy) NSArray<DOTSegment *> * _Nullable segments;
/// Default value is 0.34
@property (nonatomic) double maxFaceSizeRatio;
/// Default value is 0.1
@property (nonatomic) double minFaceSizeRatio;
/// Default value is 4
@property (nonatomic) NSInteger minValidSegmentsCount;
/// Default value is 50
@property (nonatomic) CGFloat dotSize;
/// Default value is nil
@property (nonatomic, strong) UIImage * _Nullable dotImage;
/// Default value is 0.7
@property (nonatomic) double proximityTolerance;
/// Default value is 0.25
@property (nonatomic) double positionToTolerance;
/// Default value is 0.35
@property (nonatomic) double lightScoreThreshold;
/// Default value is 1
@property (nonatomic) double cameraPreviewOverlayAlpha;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType captureSide:(enum CaptureSide)captureSide segments:(NSArray<DOTSegment *> * _Nullable)segments minValidSegmentsCount:(NSInteger)minValidSegmentsCount maxFaceSizeRatio:(double)maxFaceSizeRatio minFaceSizeRatio:(double)minFaceSizeRatio dotSize:(NSInteger)dotSize dotImage:(UIImage * _Nullable)dotImage proximityTolerance:(double)proximityTolerance positionToTolerance:(double)positionToTolerance lightScoreThreshold:(double)lightScoreThreshold cameraPreviewOverlayAlpha:(double)cameraPreviewOverlayAlpha OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType builderBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(Liveness2Configuration * _Nonnull))builderBlock OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol LivenessCheck2ControllerDelegate;
@class LivenessCheck2Style;

/// Class is used of LivenessDetection process using iFace.framework. Core of this controller is to show user
/// small dot at specific position on screen and user need to look at this dot. This need to be repeated multiple times
/// and at the and you will receive callback about current state throught delegate.
SWIFT_CLASS("_TtC3DOT24LivenessCheck2Controller")
@interface LivenessCheck2Controller : UIViewController
@property (nonatomic, weak) id <LivenessCheck2ControllerDelegate> _Nullable delegate;
/// Init instance of LivenessCheck2Controller
/// \param configuration Liveness2Configuration with multiple configuration parameters
///
/// \param style In case you want to change colors/style of controller
///
+ (LivenessCheck2Controller * _Nonnull)createWithConfiguration:(Liveness2Configuration * _Nonnull)configuration style:(LivenessCheck2Style * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Should be called in case you want to start liveness detection process
- (void)startLivenessCheck;
/// Restars whole components of Controller to default state, removes animation and change dot position to center
- (void)restartTransitionView;
/// Should be called in case you want to stop liveness detection
- (void)stopLivenessCheck;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






@interface LivenessCheck2Controller (SWIFT_EXTENSION(DOT))
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end





enum LivenessContextState : NSInteger;
@class SegmentImage;

/// Delegate protocol that need to be conformed by one of your class and used like delegate.
/// Informs user about changes in LivenessDetectionProcess
SWIFT_PROTOCOL("_TtP3DOT32LivenessCheck2ControllerDelegate_")
@protocol LivenessCheck2ControllerDelegate
/// Check if Liveness Check should start running on load
- (BOOL)livenessCheck2InitialStart:(LivenessCheck2Controller * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// Tells you that liveness check didn’t start, because of camera initialization failed
- (void)livenessCheck2CameraInitFailed:(LivenessCheck2Controller * _Nonnull)controller;
/// Tells you that state of liveness check has changed
- (void)livenessCheck2:(LivenessCheck2Controller * _Nonnull)controller livenessStateChanged:(enum LivenessContextState)state;
/// Tells you that liveness check did finish with score and captured frames from all segments
- (void)livenessCheck2:(LivenessCheck2Controller * _Nonnull)controller checkDoneWith:(float)score capturedSegmentImages:(NSArray<SegmentImage *> * _Nonnull)segmentImagesList;
/// Called when face capture has failed
- (void)livenessCheck2FaceCaptureFailed:(LivenessCheck2Controller * _Nonnull)controller;
/// Tells you that liveness check couldn’t be validated becouse you don’t have enought segments
- (void)livenessCheck2NoMoreSegments:(LivenessCheck2Controller * _Nonnull)controller;
/// Tells you that liveness check did failed, becouse no eyes on camera were detected
- (void)livenessCheck2NoEyesDetected:(LivenessCheck2Controller * _Nonnull)controller;
@optional
/// Tells you that you don’t have permission to use camera
- (void)livenessCheck2NoCameraPermission:(LivenessCheck2Controller * _Nonnull)controller;
@required
/// Called on face capture state change.
- (void)livenessCheck2:(LivenessCheck2Controller * _Nonnull)controller captureStateChanged:(enum FaceCaptureState)captureState withImage:(DOTImage * _Nullable)image;
/// Called when face capture has finished
- (void)livenessCheck2:(LivenessCheck2Controller * _Nonnull)controller didSuccess:(DetectedFace * _Nonnull)detectedFace;
@optional
/// Tells the delegate that the preview size has changed
- (void)livenessCheck2:(LivenessCheck2Controller * _Nonnull)controller previewSizeChanged:(CGSize)size;
- (void)livenessCheck2DidLoad:(LivenessCheck2Controller * _Nonnull)controller;
- (void)livenessCheck2WillDisappear:(LivenessCheck2Controller * _Nonnull)controller;
- (void)livenessCheck2DidDisappear:(LivenessCheck2Controller * _Nonnull)controller;
- (void)livenessCheck2WillAppear:(LivenessCheck2Controller * _Nonnull)controller;
- (void)livenessCheck2DidAppear:(LivenessCheck2Controller * _Nonnull)controller;
@end


SWIFT_CLASS("_TtC3DOT19LivenessCheck2Style")
@interface LivenessCheck2Style : NSObject
@property (nonatomic, strong) UIFont * _Nonnull font;
@property (nonatomic, strong) UIColor * _Nonnull hintText;
@property (nonatomic, strong) UIColor * _Nonnull hintBubble;
@property (nonatomic, strong) UIColor * _Nonnull background;
@property (nonatomic, strong) UIColor * _Nonnull overlayBackground;
@property (nonatomic, strong) UIColor * _Nonnull maskBackground;
@property (nonatomic, strong) UIColor * _Nonnull dotColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHintText:(UIColor * _Nonnull)hintText hintBubble:(UIColor * _Nonnull)hintBubble background:(UIColor * _Nonnull)background overlayBackground:(UIColor * _Nonnull)overlayBackground maskBackground:(UIColor * _Nonnull)maskBackground font:(UIFont * _Nonnull)font dotColor:(UIColor * _Nonnull)dotColor OBJC_DESIGNATED_INITIALIZER;
@end

@protocol LivenessCheckControllerDelegate;
@class LivenessConfiguration;
@class LivenessCheckStyle;

/// Class is used of LivenessDetection process using iFace.framework. Core of this controller is to show user
/// small dot at specific position on screen and user need to look at this dot. This need to be repeated multiple times
/// and at the and you will receive callback about current state throught delegate.
SWIFT_CLASS("_TtC3DOT23LivenessCheckController")
@interface LivenessCheckController : UIViewController
@property (nonatomic, weak) id <LivenessCheckControllerDelegate> _Nullable delegate;
/// Init instance of LivenessDetectionController
/// \param configuration LivenessConfiguration with multiple configuration parameters
///
/// \param style In case you want to change colors/style of controller
///
+ (LivenessCheckController * _Nonnull)createWithConfiguration:(LivenessConfiguration * _Nonnull)configuration style:(LivenessCheckStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Should be called in case you want to start liveness detection process
- (void)startLivenessCheck;
/// Restars whole components of Controller to default state, removes animation and change dot position to center
- (void)restartTransitionView;
/// Should be called in case you want to stop liveness detection
- (void)stopLivenessCheck;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






@interface LivenessCheckController (SWIFT_EXTENSION(DOT))
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
@end




/// Delegate protocol that need to be conformed by one of your class and used like delegate.
/// Informs user about changes in LivenessDetectionProcess
SWIFT_PROTOCOL("_TtP3DOT31LivenessCheckControllerDelegate_")
@protocol LivenessCheckControllerDelegate
/// Check if Liveness Check should start running on load
- (BOOL)livenessCheckInitialStart:(LivenessCheckController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// Tells you that liveness check didn’t start, because of camera initialization failed
- (void)livenessCheckCameraInitFailed:(LivenessCheckController * _Nonnull)controller;
/// Tells you that state of liveness check has changed
- (void)livenessCheck:(LivenessCheckController * _Nonnull)controller stateChanged:(enum LivenessContextState)state;
/// Tells you that liveness check did finish with score and captured frames from all segments
- (void)livenessCheck:(LivenessCheckController * _Nonnull)controller checkDoneWith:(float)score capturedSegmentImages:(NSArray<SegmentImage *> * _Nonnull)segmentImagesList;
/// Tells you that liveness check couldn’t be validated becouse you don’t have enought segments
- (void)livenessCheckNoMoreSegments:(LivenessCheckController * _Nonnull)controller;
/// Tells you that liveness check did failed, becouse no eyes on camera were detected
- (void)livenessCheckNoEyesDetected:(LivenessCheckController * _Nonnull)controller;
@optional
/// Tells you that you don’t have permission to use camera
- (void)livenessCheckNoCameraPermission:(LivenessCheckController * _Nonnull)controller;
- (void)livenessCheckDidLoad:(LivenessCheckController * _Nonnull)controller;
- (void)livenessCheckWillDisappear:(LivenessCheckController * _Nonnull)controller;
- (void)livenessCheckDidDisappear:(LivenessCheckController * _Nonnull)controller;
- (void)livenessCheckWillAppear:(LivenessCheckController * _Nonnull)controller;
- (void)livenessCheckDidAppear:(LivenessCheckController * _Nonnull)controller;
@end


SWIFT_CLASS("_TtC3DOT18LivenessCheckStyle")
@interface LivenessCheckStyle : NSObject
@property (nonatomic, strong) UIFont * _Nonnull font;
@property (nonatomic, strong) UIColor * _Nonnull hintText;
@property (nonatomic, strong) UIColor * _Nonnull hintBubble;
@property (nonatomic, strong) UIColor * _Nonnull background;
@property (nonatomic, strong) UIColor * _Nonnull dotColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHintText:(UIColor * _Nonnull)hintText hintBubble:(UIColor * _Nonnull)hintBubble background:(UIColor * _Nonnull)background font:(UIFont * _Nonnull)font dotColor:(UIColor * _Nonnull)dotColor OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC3DOT21LivenessConfiguration")
@interface LivenessConfiguration : NSObject
@property (nonatomic) enum TransitionType transitionType;
/// Default value is nil
@property (nonatomic, copy) NSArray<DOTSegment *> * _Nullable segments;
/// Default value: 0.34
@property (nonatomic) double maxFaceSizeRatio;
/// Default value: 0.1
@property (nonatomic) double minFaceSizeRatio;
/// Default value: 4
@property (nonatomic) NSInteger minValidSegmentsCount;
/// Default value: 50
@property (nonatomic) CGFloat dotSize;
/// Default value: nil
@property (nonatomic, strong) UIImage * _Nullable dotImage;
/// Default value: 0.7
@property (nonatomic) double proximityTolerance;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType segments:(NSArray<DOTSegment *> * _Nullable)segments minValidSegmentsCount:(NSInteger)minValidSegmentsCount maxFaceSizeRatio:(double)maxFaceSizeRatio minFaceSizeRatio:(double)minFaceSizeRatio dotSize:(NSInteger)dotSize dotImage:(UIImage * _Nullable)dotImage proximityTolerance:(double)proximityTolerance OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType builderBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(LivenessConfiguration * _Nonnull))builderBlock OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT15LivenessContext")
@interface LivenessContext : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







typedef SWIFT_ENUM(NSInteger, LivenessContextState, open) {
  LivenessContextStateOk = 0,
  LivenessContextStateNoFace = 1,
  LivenessContextStateLost = 2,
  LivenessContextStateLowQuality = 3,
  LivenessContextStateTooClose = 4,
  LivenessContextStateTooFar = 5,
};

@class AVCaptureVideoPreviewLayer;

SWIFT_CLASS("_TtC3DOT11PreviewView")
@interface PreviewView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// Convenience wrapper to get layer as its statically known type.
@property (nonatomic, readonly, strong) AVCaptureVideoPreviewLayer * _Nonnull videoPreviewLayer;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC3DOT9Rectangle")
@interface Rectangle : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT12SegmentImage")
@interface SegmentImage : NSObject
@property (nonatomic, readonly, strong) DOTImage * _Nonnull dotImage;
@property (nonatomic, readonly) BOOL isValid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TemplateInfo;

SWIFT_CLASS("_TtC3DOT8Template")
@interface Template : NSObject
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull data;
@property (nonatomic, strong) TemplateInfo * _Nullable info;
- (nonnull instancetype)initWithData:(NSArray<NSNumber *> * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithData:(NSArray<NSNumber *> * _Nonnull)data info:(TemplateInfo * _Nullable)info OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT12TemplateInfo")
@interface TemplateInfo : NSObject
@property (nonatomic, readonly) NSInteger minor;
@property (nonatomic, readonly) NSInteger major;
@property (nonatomic, readonly) NSInteger quality;
- (nonnull instancetype)initWithMinor:(NSInteger)minor major:(NSInteger)major quality:(NSInteger)quality OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT16TemplateVerifier")
@interface TemplateVerifier : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Verify reference and probe face templates
/// \param referenceTemplate Template
///
/// \param probeTemplate Template
///
///
/// returns:
/// Score
- (NSNumber * _Nullable)matchWithReferenceTemplate:(Template * _Nonnull)referenceTemplate probeTemplate:(Template * _Nonnull)probeTemplate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, TransitionType, open) {
  TransitionTypeMove = 0,
  TransitionTypeFade = 1,
};





















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DOT",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, Attribute, open) {
  AttributeSharpness = 0,
  AttributeBrightness = 1,
  AttributeContrast = 2,
  AttributeIntensityLevel = 3,
  AttributeShadow = 4,
  AttributeNoseShadow = 5,
  AttributeSpecularity = 6,
  AttributeEyeGaze = 7,
  AttributeEyeStatusRight = 8,
  AttributeEyeStatusLeft = 9,
  AttributeGlassStatus = 10,
  AttributeHeavyFrame = 11,
  AttributeBackgroundUniformity = 12,
  AttributeAge = 13,
  AttributeRedEyeRight = 14,
  AttributeRedEyeLeft = 15,
  AttributeRoll = 16,
  AttributeYaw = 17,
  AttributePitch = 18,
  AttributeGender = 19,
  AttributeSegmentationMask = 20,
  AttributeCrop = 21,
  AttributeTemplate = 22,
  AttributeEyeDistance = 23,
  AttributeConfidence = 24,
  AttributeMounthStatus = 25,
};


SWIFT_CLASS("_TtC3DOT14AttributeScore")
@interface AttributeScore : NSObject
@property (nonatomic, readonly) enum Attribute attribute;
@property (nonatomic, readonly) double value;
- (nonnull instancetype)initWithAttribute:(enum Attribute)attribute OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAttribute:(enum Attribute)attribute value:(double)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT16AttributeWrapper")
@interface AttributeWrapper : NSObject
- (nonnull instancetype)initWithAttribute:(enum Attribute)attribute OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CaptureSide, open) {
  CaptureSideFront = 0,
  CaptureSideBack = 1,
};

typedef SWIFT_ENUM(NSInteger, CropMethod, open) {
  CropMethodTokenFrontal = 0,
  CropMethodFullFrontal = 1,
  CropMethodFrontalExtended = 2,
};


/// Class handling camera usage
SWIFT_CLASS("_TtC3DOT9DOTCamera")
@interface DOTCamera : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVCaptureOutput;
@class AVCaptureConnection;

@interface DOTCamera (SWIFT_EXTENSION(DOT)) <AVCaptureVideoDataOutputSampleBufferDelegate>
/// Receives sampleBuffer converted to Image and croped to current preview size. Result image is sent to DOTCameraDelegate
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end

@class AVCapturePhotoOutput;
@class AVCapturePhoto;
@class AVCaptureResolvedPhotoSettings;
@class AVCaptureBracketedStillImageSettings;

@interface DOTCamera (SWIFT_EXTENSION(DOT)) <AVCapturePhotoCaptureDelegate>
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishProcessingPhoto:(AVCapturePhoto * _Nonnull)photo error:(NSError * _Nullable)error SWIFT_AVAILABILITY(ios,introduced=11.0);
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output willCapturePhotoForResolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings;
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishProcessingPhotoSampleBuffer:(CMSampleBufferRef _Nullable)photoSampleBuffer previewPhotoSampleBuffer:(CMSampleBufferRef _Nullable)previewPhotoSampleBuffer resolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings bracketSettings:(AVCaptureBracketedStillImageSettings * _Nullable)bracketSettings error:(NSError * _Nullable)error SWIFT_AVAILABILITY(ios,introduced=10.0);
@end


SWIFT_CLASS("_TtC3DOT12DOTDimension")
@interface DOTDimension : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum LogLevel : NSInteger;
@class NSBundle;
@class License;
@class DOTCameraAuthorizationStatus;
enum Feature : NSInteger;

/// Type containg basic functions for IFace/DOT configuration
SWIFT_CLASS("_TtC3DOT10DOTHandler")
@interface DOTHandler : NSObject
/// Prints some basic information to console based on specific LogLevel type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum LogLevel logLevel;)
+ (enum LogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum LogLevel)value;
/// Set the bundle for localizable strings
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nonnull localizationBundle;)
+ (NSBundle * _Nonnull)localizationBundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationBundle:(NSBundle * _Nonnull)value;
/// To work with DOT library you need to initialize whole IFace framework using <em>license</em> or without license. In most cases you need license to make the whole DOT framework run.
/// \param license Optional parameter which contains licensing data obtained from <em>.lic</em>  file.
///
/// \param faceDetectionConfidenceThreshold Face detection confidence threshold. Value in interval 0-10000. Default is 600.
///
+ (void)initializeWith:(License * _Nullable)license faceDetectionConfidenceThreshold:(NSInteger)faceDetectionConfidenceThreshold;
/// To work with DOT library you need to initialize whole IFace framework using <em>license</em> or without license. In most cases you need license to make the whole DOT framework run.
/// \param license Optional parameter which contains licensing data obtained from <em>.lic</em>  file.
///
/// \param faceDetectionConfidenceThreshold Face detection confidence threshold. Value in interval 0-10000. Default is 600.
///
+ (void)initializeWith:(License * _Nullable)license;
/// In case you want to stop working with DOT, you have to manually call this method to deinitialize it. It will freed up your memory from DOT/iFace instances
+ (void)deinitialize;
/// Checks authorization status of Camera
///
/// returns:
/// <code>nil</code> if not determined, <code>status</code> other
+ (DOTCameraAuthorizationStatus * _Nullable)authorizeCameraOnRequestAccess:(void (^ _Nullable)(AVAuthorizationStatus))onRequestAccess SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// License ID used for generating license file.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable licenseId;)
+ (NSString * _Nullable)licenseId SWIFT_WARN_UNUSED_RESULT;
+ (void)setLicenseId:(NSString * _Nullable)value;
///
/// returns:
/// Description of the attribute
+ (NSString * _Nonnull)attributeDescription:(enum Attribute)attr SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Description of the feature
+ (NSString * _Nonnull)featureDescription:(enum Feature)feature SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// <ol>
///   <li>
///     case <em>error</em> - prints only error messages with error specification and number (IFaceError)
///   </li>
///   <li>
///     case <em>verbose</em> - prints everything, even successful function call. For example when you call method <code>initialize(with: License)</code>
///   </li>
///   <li>
///     case <em>none</em> - will not print any logs based on DOT framework
///   </li>
/// </ol>
typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelError = 0,
  LogLevelVerbose = 1,
  LogLevelNone = 2,
};


SWIFT_CLASS("_TtCC3DOT10DOTHandler28DOTCameraAuthorizationStatus")
@interface DOTCameraAuthorizationStatus : NSObject
@property (nonatomic, readonly) AVAuthorizationStatus authorizationStatus;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIImage;

SWIFT_CLASS("_TtC3DOT8DOTImage")
@interface DOTImage : NSObject
@property (nonatomic, copy) NSData * _Nonnull data;
@property (nonatomic, copy) NSDate * _Nonnull captureTimeInterval;
@property (nonatomic, readonly, strong) DOTDimension * _Nonnull dimenstion;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
- (nullable instancetype)initWithImage:(UIImage * _Nonnull)image error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC3DOT15DOTImageWrapper")
@interface DOTImageWrapper : NSObject
@property (nonatomic, readonly, strong) DOTImage * _Nullable dotImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Configuration;
@class UIViewController;
@class NSCoder;

SWIFT_CLASS("_TtC3DOT23DOTNavigationController")
@interface DOTNavigationController : UINavigationController
+ (DOTNavigationController * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
+ (DOTNavigationController * _Nonnull)createWithConfiguration:(Configuration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface DOTNavigationController (SWIFT_EXTENSION(DOT))
@end

@class UIColor;

/// In case of customizing the NavigationController inside StepCoordinators
SWIFT_CLASS("_TtCC3DOT23DOTNavigationController13Configuration")
@interface Configuration : NSObject
/// Black
@property (nonatomic) UIBarStyle barStyle;
/// navBackgroundColor
@property (nonatomic, strong) UIColor * _Nonnull barTintColor;
/// White
@property (nonatomic, strong) UIColor * _Nonnull tintColor;
/// White
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBarStyle:(UIBarStyle)barStyle barTintColor:(UIColor * _Nonnull)barTintColor tintColor:(UIColor * _Nonnull)tintColor titleColor:(UIColor * _Nonnull)titleColor OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC3DOT8DOTPoint")
@interface DOTPoint : NSObject
@property (nonatomic, readonly) double x;
@property (nonatomic, readonly) double y;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum DOTSegmentPosition : NSInteger;

SWIFT_CLASS("_TtC3DOT10DOTSegment")
@interface DOTSegment : NSObject
@property (nonatomic, readonly) enum DOTSegmentPosition position;
@property (nonatomic, readonly) NSInteger duration;
- (nonnull instancetype)initWithTargetPosition:(enum DOTSegmentPosition)targetPosition duration:(NSInteger)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, DOTSegmentPosition, open) {
  DOTSegmentPositionTopLeft = 0,
  DOTSegmentPositionTopRight = 1,
  DOTSegmentPositionBottomLeft = 2,
  DOTSegmentPositionBottomRight = 3,
};

@class Face;
@class Template;
@class IcaoAttribute;
@class FeatureWrapper;
@class FeaturePoint;

SWIFT_CLASS("_TtC3DOT12DetectedFace")
@interface DetectedFace : NSObject
@property (nonatomic, readonly, strong) Face * _Nonnull face;
@property (nonatomic, readonly) NSInteger eyeDistance;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable eyeLeft;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable eyeRight;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable noseTip;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable mouthLeftCorner;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable mouthRightCorner;
@property (nonatomic, readonly, strong) DOTPoint * _Nullable faceCenter;
@property (nonatomic, readonly, strong) DOTImage * _Nonnull image;
@property (nonatomic, strong) UIImage * _Nullable cropedFace;
@property (nonatomic, readonly) double confidence;
@property (nonatomic, readonly, strong) Template * _Nullable faceTemplate;
- (NSArray<IcaoAttribute *> * _Nonnull)attributes:(NSArray<AttributeWrapper *> * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FeaturePoint *> * _Nonnull)features:(NSArray<FeatureWrapper *> * _Nonnull)features SWIFT_WARN_UNUSED_RESULT;
- (void)deinitialize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





typedef SWIFT_ENUM(NSInteger, DotPosition, open) {
  DotPositionCenter = -1,
  DotPositionTopLeft = 0,
  DotPositionTopRight = 1,
  DotPositionBottomLeft = 2,
  DotPositionBottomRight = 3,
};

@class Rectangle;

SWIFT_CLASS("_TtC3DOT4Face")
@interface Face : NSObject
- (AttributeScore * _Nullable)attributeScore:(enum Attribute)attr SWIFT_WARN_UNUSED_RESULT;
- (NSArray<IcaoAttribute *> * _Nonnull)attributes:(NSArray<AttributeWrapper *> * _Nonnull)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSArray<FeaturePoint *> * _Nonnull)features:(NSArray<FeatureWrapper *> * _Nonnull)features SWIFT_WARN_UNUSED_RESULT;
- (Rectangle * _Nullable)cropFaceRectWithCropMethod:(enum CropMethod)cropMethod SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Contains configuration parameters for FaceCaptureController like requestFullCapture, showCheckAnimation etc.
SWIFT_CLASS("_TtC3DOT24FaceCaptureConfiguration")
@interface FaceCaptureConfiguration : NSObject
/// [0.1] Ratio used for calculating minimal face size in image
@property (nonatomic) double minFaceSizeRatio;
/// [0.34] Ratio used for calculating maximal face size in image
@property (nonatomic) double maxFaceSizeRatio;
/// [false] Indicates which instruction texts should be used for process
@property (nonatomic) BOOL useAlternativeInstructions;
/// [false] In case your final captured candidate should contain captured full image
@property (nonatomic) BOOL requestFullImage;
/// [false] In case your final captured candidate should contain captured crop image
@property (nonatomic) BOOL requestCropImage;
/// [false] In case your final captured candidate should contain captured crop image
@property (nonatomic) BOOL requestTemplate;
/// [true] Indicates if tick animation should be performed after succesfull capture
@property (nonatomic) BOOL showCheckAnimation;
/// [.front] Indcates which camera should be used. Options are front/back.
@property (nonatomic) AVCaptureDevicePosition cameraPosition;
/// [0.3] Light score threshold to accept face image from camera
@property (nonatomic) double lightScoreThreshold;
/// Use this class to configure face capture step
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Use this class to configure face capture step
/// \param minFaceSizeRatio [0.1] ratio used for calculating minimal face size in image
///
/// \param maxFaceSizeRatio [0.34] ratio used for calculating maximal face size in image
///
/// \param showCheckAnimation [true] indicates if tick animation should be performed after succesfull capture
///
/// \param useAlternativeInstructions [false] indicates which instruction texts should be used for process
///
/// \param requestFullImage [false] in case your final captured candidate should contain captured full image
///
/// \param requestCropImage [false] in case your final captured candidate should contain captured crop image
///
/// \param requestTemplate [false] in case your final captured candidate should contain template
///
/// \param cameraPosition [.front] indcates which camera should be used. Options are front/back
///
/// \param lightScoreThreshold [0.3] Light score threshold to accept face image from camera.
///
- (nonnull instancetype)initWithMinFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio useAlternativeInstructions:(BOOL)useAlternativeInstructions requestFullImage:(BOOL)requestFullImage requestCropImage:(BOOL)requestCropImage requestTemplate:(BOOL)requestTemplate showCheckAnimation:(BOOL)showCheckAnimation lightScoreThreshold:(double)lightScoreThreshold cameraPosition:(AVCaptureDevicePosition)cameraPosition OBJC_DESIGNATED_INITIALIZER;
/// Use this class to configure face capture step
/// \param builder builder closure
///
/// \param minFaceSizeRatio [0.1] ratio used for calculating minimal face size in image
///
/// \param maxFaceSizeRatio [0.34] ratio used for calculating maximal face size in image
///
/// \param showCheckAnimation [true] indicates if tick animation should be performed after succesfull capture
///
/// \param useAlternativeInstructions [false] indicates which instruction texts should be used for process
///
/// \param requestFullImage [false] in case your final captured candidate should contain captured full image
///
/// \param requestCropImage [false] in case your final captured candidate should contain captured crop image
///
/// \param requestTemplate [false] in case your final captured candidate should contain template
///
/// \param cameraPosition [.front] indcates which camera should be used. Options are front/back
///
/// \param lightScoreThreshold [0.3] Light score threshold to accept face image from camera.
///
- (nonnull instancetype)init:(SWIFT_NOESCAPE void (^ _Nonnull)(FaceCaptureConfiguration * _Nonnull))builderBlock OBJC_DESIGNATED_INITIALIZER;
@end

@protocol FaceCaptureControllerDelegate;
@class FaceCaptureStyle;

/// Class with instructions for obtaining quality image suitable for verification
SWIFT_CLASS("_TtC3DOT21FaceCaptureController")
@interface FaceCaptureController : UIViewController
@property (nonatomic, weak) id <FaceCaptureControllerDelegate> _Nullable delegate;
/// Use this method in case of creating instance of FaceCaptureController
/// \param configuration Contains configuration parameters for FaceCaptureController like requestFullCapture, showCheckAnimation etc.
///
+ (FaceCaptureController * _Nonnull)createWithConfiguration:(FaceCaptureConfiguration * _Nonnull)configuration style:(FaceCaptureStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Should be called in case you want to start process for capturing candidate
- (void)requestFaceCapture;
/// Should be called in case you want to stop/pause process for capturing candidate
- (void)stopFaceCapture;
/// Should be called in case you want to reset state of controller to default values and start from the scratch
- (void)resetController;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end





@class UITraitCollection;

@interface FaceCaptureController (SWIFT_EXTENSION(DOT))
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end





@class FaceCaptureImage;
enum FaceCaptureState : NSInteger;

/// Delegate protocol of FaceCaptureController
SWIFT_PROTOCOL("_TtP3DOT29FaceCaptureControllerDelegate_")
@protocol FaceCaptureControllerDelegate
@optional
- (void)faceCaptureDidLoad:(FaceCaptureController * _Nonnull)controller;
- (void)faceCaptureDidAppear:(FaceCaptureController * _Nonnull)controller;
- (void)faceCaptureWillAppear:(FaceCaptureController * _Nonnull)controller;
- (void)faceCaptureWillDisappear:(FaceCaptureController * _Nonnull)controller;
- (void)faceCaptureDidDisappear:(FaceCaptureController * _Nonnull)controller;
/// Tells the delegate that camera init has failed
- (void)faceCaptureCameraInitFailed:(FaceCaptureController * _Nonnull)controller;
/// Tells the delegate that you have no parmissions for camera usage
- (void)faceCaptureNoCameraPermission:(FaceCaptureController * _Nonnull)controller;
@required
/// Tells the delegate that successful candidate was captured by FaceCapture Process
- (void)faceCapture:(FaceCaptureController * _Nonnull)controller didCapture:(FaceCaptureImage * _Nonnull)faceCaptureImage;
/// Tells the delegate that it was not possible to capture cadidate
- (void)faceCaptureDidFailed:(FaceCaptureController * _Nonnull)controller;
@optional
/// Tells the delegate that the step of capturing the face has changed
- (void)faceCapture:(FaceCaptureController * _Nonnull)controller stateChanged:(enum FaceCaptureState)state withImage:(DOTImage * _Nullable)image;
/// Tells the delegate that the preview size has changed
- (void)faceCapture:(FaceCaptureController * _Nonnull)controller previewSizeChanged:(CGSize)size;
@end


SWIFT_CLASS("_TtC3DOT16FaceCaptureImage")
@interface FaceCaptureImage : NSObject
@property (nonatomic, readonly, strong) Template * _Nullable faceTemplate;
@property (nonatomic, readonly, strong) UIImage * _Nullable croppedImage;
@property (nonatomic, readonly, strong) UIImage * _Nullable fullImage;
- (nonnull instancetype)initWithTemplate:(Template * _Nullable)template_ croppedImage:(UIImage * _Nullable)croppedImage fullImage:(UIImage * _Nullable)fullImage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT30FaceCaptureSimpleConfiguration")
@interface FaceCaptureSimpleConfiguration : NSObject
/// [0.1] ratio used for calculating minimal face size in image
@property (nonatomic) double minFaceSizeRatio;
/// [0.34] ratio used for calculating maximal face size in image
@property (nonatomic) double maxFaceSizeRatio;
/// [false] in case your final captured candidate should contain captured full image
@property (nonatomic) BOOL requestFullImage;
/// [false] in case your final captured candidate should contain captured crop image
@property (nonatomic) BOOL requestCropImage;
/// [false] in case your final captured candidate should contain template
@property (nonatomic) BOOL requestTemplate;
/// [.front] indcates which camera should be used. Options are front/back.
@property (nonatomic) AVCaptureDevicePosition cameraPosition;
/// Use this method in case of default implementation of configuration for  FaceCaptureSimpleController
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Use this method in case of modifing FaceCaptureSimpleController configuration
/// \param minFaceSizeRatio [0.1] ratio used for calculating minimal face size in image
///
/// \param maxFaceSizeRatio [0.34] ratio used for calculating maximal face size in image
///
/// \param requestFullImage [false] in case your final captured candidate should contain captured full image
///
/// \param requestCropImage [false] in case your final captured candidate should contain captured crop image
///
/// \param requestTemplate [false] in case your final captured candidate should contain template
///
/// \param cameraPosition [.front] indcates which camera should be used. Options are front/back.
///
- (nonnull instancetype)initWithMinFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio requestFullImage:(BOOL)requestFullImage requestCropImage:(BOOL)requestCropImage requestTemplate:(BOOL)requestTemplate cameraPosition:(AVCaptureDevicePosition)cameraPosition OBJC_DESIGNATED_INITIALIZER;
/// Use this method in case of modifing FaceCaptureSimpleController configuration
/// \param minFaceSizeRatio [0.1] ratio used for calculating minimal face size in image
///
/// \param maxFaceSizeRatio [0.34] ratio used for calculating maximal face size in image
///
/// \param requestFullImage [false] in case your final captured candidate should contain captured full image
///
/// \param requestCropImage [false] in case your final captured candidate should contain captured crop image
///
/// \param requestTemplate [false] in case your final captured candidate should contain template
///
/// \param cameraPosition [.front] indcates which camera should be used. Options are front/back.
///
- (nonnull instancetype)init:(SWIFT_NOESCAPE void (^ _Nonnull)(FaceCaptureSimpleConfiguration * _Nonnull))builderBlock OBJC_DESIGNATED_INITIALIZER;
@end

@protocol FaceCaptureSimpleControllerDelegate;
@class FaceCaptureSimpleStyle;

/// Class without instructions for obtaining image suitable for verification.
SWIFT_CLASS("_TtC3DOT27FaceCaptureSimpleController")
@interface FaceCaptureSimpleController : UIViewController
@property (nonatomic, weak) id <FaceCaptureSimpleControllerDelegate> _Nullable delegate;
/// Use this method in case of creating instance of FaceCaptureSimpleController
/// \param minFaceSizeRatio ratio used for calculating minimal face size in image
///
/// \param maxFaceSizeRatio ratio used for calculating maximal face size in image
///
/// \param requestFullImage in case your final captured candidate should contain captured full image
///
/// \param requestCropImage in case your final captured candidate should contain captured crop image
///
/// \param requestTemplate in case your final captured candidate should contain template
///
/// \param cameraPosition indcates which camera should be used. Options are front/back.
///
/// \param style In case you want to customize style/colors of controller’s components use this property.
///
+ (FaceCaptureSimpleController * _Nonnull)createWithConfiguration:(FaceCaptureSimpleConfiguration * _Nonnull)configuration style:(FaceCaptureSimpleStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Should be called in case you want to start process for capturing candidate
- (void)requestFaceCapture;
/// Should be called in case you want to stop/pause process for capturing candidate
- (void)stopFaceCapture;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end










@interface FaceCaptureSimpleController (SWIFT_EXTENSION(DOT))
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end


/// Delegate protocol of FaceCaptureSimpleController
SWIFT_PROTOCOL("_TtP3DOT35FaceCaptureSimpleControllerDelegate_")
@protocol FaceCaptureSimpleControllerDelegate
@optional
- (void)faceCaptureSimpleDidLoad:(FaceCaptureSimpleController * _Nonnull)controller;
- (void)faceCaptureSimpleDidAppear:(FaceCaptureSimpleController * _Nonnull)controller;
- (void)faceCaptureSimpleWillAppear:(FaceCaptureSimpleController * _Nonnull)controller;
- (void)faceCaptureSimpleDidDisappear:(FaceCaptureSimpleController * _Nonnull)controller;
- (void)faceCaptureSimpleWillDisappear:(FaceCaptureSimpleController * _Nonnull)controller;
/// Tells the delegate that camera init has failed
- (void)faceCaptureSimpleCameraInitFailed:(FaceCaptureSimpleController * _Nonnull)controller;
/// Tells the delegate that you have no parmissions for camera usage
- (void)faceCaptureSimpleNoCameraPermission:(FaceCaptureSimpleController * _Nonnull)controller;
@required
/// Tells the delegate that successful candidate was captured by FaceCapture Process
- (void)faceCaptureSimple:(FaceCaptureSimpleController * _Nonnull)controller didCapture:(FaceCaptureImage * _Nonnull)faceCaptureSimpleImage;
/// Tells the delegate that it was not possible to capture cadidate
- (void)faceCaptureSimpleDidFailed:(FaceCaptureSimpleController * _Nonnull)controller;
@optional
/// Tells the delegate that the preview size has changed
- (void)faceCaptureSimple:(FaceCaptureSimpleController * _Nonnull)controller previewSizeChanged:(CGSize)size;
@end


SWIFT_CLASS("_TtC3DOT22FaceCaptureSimpleStyle")
@interface FaceCaptureSimpleStyle : NSObject
@property (nonatomic, strong) UIColor * _Nonnull background;
@property (nonatomic, strong) UIColor * _Nonnull trackingCircleOutline;
@property (nonatomic, strong) UIColor * _Nonnull trackingCircleBackground;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackground:(UIColor * _Nonnull)background trackingCircleOutline:(UIColor * _Nonnull)trackingCircleOutline trackingCircleBackground:(UIColor * _Nonnull)trackingCircleBackground OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FaceCaptureState, open) {
  FaceCaptureStatePresenceStep = 0,
  FaceCaptureStatePositionStep = 1,
  FaceCaptureStateLightStep = 2,
  FaceCaptureStateCapturingStep = 3,
  FaceCaptureStateDoneStep = 4,
};

@class UIFont;

SWIFT_CLASS("_TtC3DOT16FaceCaptureStyle")
@interface FaceCaptureStyle : NSObject
@property (nonatomic, strong) UIColor * _Nonnull background;
@property (nonatomic, strong) UIColor * _Nonnull backgroundOverlay;
@property (nonatomic, strong) UIColor * _Nonnull circleOutline;
@property (nonatomic, strong) UIColor * _Nonnull trackingCircleOutline;
@property (nonatomic, strong) UIColor * _Nonnull trackingCircleBackground;
@property (nonatomic, strong) UIColor * _Nonnull progressValid;
@property (nonatomic, strong) UIColor * _Nonnull progressIntermediate;
@property (nonatomic, strong) UIColor * _Nonnull progressInvalid;
@property (nonatomic, strong) UIColor * _Nonnull tick;
@property (nonatomic, strong) UIFont * _Nonnull font;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackground:(UIColor * _Nonnull)background backgroundOverlay:(UIColor * _Nonnull)backgroundOverlay circleOutline:(UIColor * _Nonnull)circleOutline trackingCircleOutline:(UIColor * _Nonnull)trackingCircleOutline trackingCircleBackground:(UIColor * _Nonnull)trackingCircleBackground progressValid:(UIColor * _Nonnull)progressValid progressIntermediate:(UIColor * _Nonnull)progressIntermediate progressInvalid:(UIColor * _Nonnull)progressInvalid tick:(UIColor * _Nonnull)tick font:(UIFont * _Nonnull)font OBJC_DESIGNATED_INITIALIZER;
@end

@class FaceImage;

SWIFT_CLASS("_TtC3DOT12FaceDetector")
@interface FaceDetector : NSObject
/// Detect list of faces from image
/// \param image Face image
///
/// \param maximumFaces Int
///
///
/// returns:
/// list of detected faces
- (NSArray<DetectedFace *> * _Nonnull)detectFaces:(FaceImage * _Nonnull)image maximumFaces:(NSInteger)maximumFaces SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC3DOT9FaceImage")
@interface FaceImage : NSObject
/// Create FaceImage from UIImage and face size ratio
/// \param image face image
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
/// Create FaceImage from UIImage and face distance ratios
/// \param image face image
///
/// \param minFaceSizeRatio [0.02] minimum face size ratio. This defines size of searched face in the image.
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image minFaceSizeRatio:(double)minFaceSizeRatio OBJC_DESIGNATED_INITIALIZER;
/// Create FaceImage from UIImage and face distance ratios
/// \param image face image
///
/// \param maxFaceSizeRatio [0.5] maximum face size ratio. This defines size of searched face in the image
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image maxFaceSizeRatio:(double)maxFaceSizeRatio OBJC_DESIGNATED_INITIALIZER;
/// Create FaceImage from UIImage and face distance ratios
/// \param image face image
///
/// \param minFaceSizeRatio [0.02] minimum face size ratio. This defines size of searched face in the image.
///
/// \param maxFaceSizeRatio [0.5] maximum face size ratio. This defines size of searched face in the image
///
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image minFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

SWIFT_CLASS("_TtC3DOT17FaceImageVerifier")
@interface FaceImageVerifier : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Verify list of face images against reference face image.
/// \param referenceFaceImage Face image
///
/// \param probeFaceImages Face image list
///
///
/// returns:
/// list of matching scores for each face image
- (NSArray<NSNumber *> * _Nullable)matchWithReferenceFaceImage:(FaceImage * _Nonnull)referenceFaceImage probeFaceImages:(NSArray<FaceImage *> * _Nonnull)probeFaceImages error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Verify list of face images against reference face template.
/// \param referenceFaceTemplate Face template
///
/// \param probeFaceImages Face image list
///
///
/// returns:
/// list of matching scores for each face image
- (NSArray<NSNumber *> * _Nullable)matchWithReferenceTemplate:(Template * _Nonnull)referenceFaceTemplate probeFaceImages:(NSArray<FaceImage *> * _Nonnull)probeFaceImages error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Verify face image against reference face image.
/// \param referenceFaceImage Face image
///
/// \param probeFaceImage Face image
///
///
/// returns:
/// matching score
- (NSNumber * _Nullable)matchWithReferenceFaceImage:(FaceImage * _Nonnull)referenceFaceImage probeFaceImage:(FaceImage * _Nonnull)probeFaceImage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Verify face image against reference face image.
/// \param referenceFaceTemplate Face template
///
/// \param probeFaceImage Face image
///
///
/// returns:
/// matching score
- (NSNumber * _Nullable)matchWithReferenceTemplate:(Template * _Nonnull)referenceFaceTemplate probeFaceImage:(FaceImage * _Nonnull)probeFaceImage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, FaceTemplateError, open) {
  FaceTemplateErrorVersionNotSupported = 0,
  FaceTemplateErrorTemplateIncompatible = 1,
  FaceTemplateErrorTemplateCorrupted = 2,
  FaceTemplateErrorOther = 3,
};
static NSString * _Nonnull const FaceTemplateErrorDomain = @"DOT.FaceTemplateError";

@protocol FaceVerifierDelegate;

SWIFT_CLASS("_TtC3DOT12FaceVerifier") SWIFT_DEPRECATED_MSG("Use `TemplateVerifier` or `LivenessImageVerifier` instead.")
@interface FaceVerifier : NSObject
@property (nonatomic, weak) id <FaceVerifierDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)verifyWithProbeTemplate:(Template * _Nonnull)probeTemplate referenceTemplate:(Template * _Nonnull)referenceTemplate threshold:(float)threshold templateId:(NSInteger)templateId;
- (void)verifyWithProbeImage:(FaceImage * _Nonnull)probeImage referenceTemplate:(Template * _Nonnull)referenceTemplate threshold:(float)threshold templateId:(NSInteger)templateId;
- (BOOL)verifyIfAvailableWithProbeImage:(FaceImage * _Nonnull)probeImage referenceTemplate:(Template * _Nonnull)referenceTemplate threshold:(float)threshold checkMultipleFaces:(BOOL)checkMultipleFaces templateId:(NSInteger)templateId;
- (void)verifyWithProbeImage:(FaceImage * _Nonnull)probeImage referenceImage:(FaceImage * _Nonnull)referenceImage threshold:(float)threshold templateId:(NSInteger)templateId;
- (BOOL)verifyIfAvailableWithProbeImage:(FaceImage * _Nonnull)probeImage referenceImage:(FaceImage * _Nonnull)referenceImage threshold:(float)threshold checkMultipleFaces:(BOOL)checkMultipleFaces templateId:(NSInteger)templateId;
@end


SWIFT_PROTOCOL("_TtP3DOT20FaceVerifierDelegate_") SWIFT_DEPRECATED_MSG("Use `TemplateVerifier` or `LivenessImageVerifier` instead.")
@protocol FaceVerifierDelegate
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier verifiedTemplate:(NSInteger)templateId score:(float)score;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier notVerifiedTemplate:(NSInteger)templateId score:(float)score;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier incompatibleTemplateId:(NSInteger)templateId;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier faceNotFoundOnProbe:(NSInteger)templateId;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier faceNotFoundOnReference:(NSInteger)templateId;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier multipleFaceFoundOnProbe:(NSInteger)count templateId:(NSInteger)templateId;
- (void)faceVerifier:(FaceVerifier * _Nonnull)faceVerifier multipleFaceFoundOnReference:(NSInteger)count templateId:(NSInteger)templateId;
@end

typedef SWIFT_ENUM(NSInteger, Feature, open) {
  FeatureRightEyeOuterCorner = 0,
  FeatureRightEyeCenter = 1,
  FeatureRightEyeInnerCorner = 2,
  FeatureLeftEyeOuterCorner = 3,
  FeatureLeftEyeCenter = 4,
  FeatureLeftEyeInnerCorner = 5,
  FeatureNoseTip = 6,
  FeatureMouthRightCorner = 7,
  FeatureMouthCenter = 8,
  FeatureMouthLeftCorner = 9,
  FeatureMouthUpperEdge = 10,
  FeatureMouthLowerEdge = 11,
  FeatureRightEyebrowOuterEdge = 12,
  FeatureRightEyebrowInnerEdge = 13,
  FeatureLeftEyebrowOuterEdge = 14,
  FeatureLeftEyebrowInnerEdge = 15,
  FeatureFaceRightEdge = 16,
  FeatureFaceChinTip = 17,
  FeatureFaceLeftEdge = 18,
};


SWIFT_CLASS("_TtC3DOT12FeaturePoint")
@interface FeaturePoint : NSObject
@property (nonatomic, readonly) enum Feature feature;
@property (nonatomic, readonly, strong) DOTPoint * _Nonnull point;
@property (nonatomic, readonly) float score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT14FeatureWrapper")
@interface FeatureWrapper : NSObject
- (nonnull instancetype)initWithFeature:(enum Feature)feature OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum IcaoRangeStatus : NSInteger;

SWIFT_CLASS("_TtC3DOT13IcaoAttribute")
@interface IcaoAttribute : NSObject
@property (nonatomic, readonly, strong) AttributeScore * _Nonnull score;
@property (nonatomic, readonly) BOOL fulfilled;
@property (nonatomic, readonly) enum IcaoRangeStatus rangeStatus;
@property (nonatomic, readonly) BOOL available;
@property (nonatomic, readonly) enum Attribute attribute;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, IcaoRangeStatus, open) {
  IcaoRangeStatusNone = -2,
  IcaoRangeStatusTooLow = -1,
  IcaoRangeStatusInRange = 0,
  IcaoRangeStatusTooHigh = 1,
};


/// Create this object for usage in DOT initialization method <code>DOT.initialize(from: License)</code>.
/// License instance parse data to valid format used in IFace framework.
/// <h3>Usage Example:</h3>
/// \code
/// if let path = Bundle.main.path(forResource: "lic_file", ofType: "lic") {
///    do {
///        let license = try License(path: path)
///        DOT.initialize(with: license)
///    } catch {
///        print(error)
///    }
/// }
///
/// \endcode
SWIFT_CLASS("_TtC3DOT7License")
@interface License : NSObject
/// \param path Path to <em>.lic</em> file stored in project directory.
///
- (nullable instancetype)initWithPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TransitionType : NSInteger;

SWIFT_CLASS("_TtC3DOT22Liveness2Configuration")
@interface Liveness2Configuration : NSObject
@property (nonatomic) enum CaptureSide captureSide;
/// Default value is front
@property (nonatomic) enum TransitionType transitionType;
/// Default value is nil
@property (nonatomic, copy) NSArray<DOTSegment *> * _Nullable segments;
/// Default value is 0.34
@property (nonatomic) double maxFaceSizeRatio;
/// Default value is 0.1
@property (nonatomic) double minFaceSizeRatio;
/// Default value is 4
@property (nonatomic) NSInteger minValidSegmentsCount;
/// Default value is 50
@property (nonatomic) CGFloat dotSize;
/// Default value is nil
@property (nonatomic, strong) UIImage * _Nullable dotImage;
/// Default value is 0.7
@property (nonatomic) double proximityTolerance;
/// Default value is 0.25
@property (nonatomic) double positionToTolerance;
/// Default value is 0.35
@property (nonatomic) double lightScoreThreshold;
/// Default value is 1
@property (nonatomic) double cameraPreviewOverlayAlpha;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType captureSide:(enum CaptureSide)captureSide segments:(NSArray<DOTSegment *> * _Nullable)segments minValidSegmentsCount:(NSInteger)minValidSegmentsCount maxFaceSizeRatio:(double)maxFaceSizeRatio minFaceSizeRatio:(double)minFaceSizeRatio dotSize:(NSInteger)dotSize dotImage:(UIImage * _Nullable)dotImage proximityTolerance:(double)proximityTolerance positionToTolerance:(double)positionToTolerance lightScoreThreshold:(double)lightScoreThreshold cameraPreviewOverlayAlpha:(double)cameraPreviewOverlayAlpha OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType builderBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(Liveness2Configuration * _Nonnull))builderBlock OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol LivenessCheck2ControllerDelegate;
@class LivenessCheck2Style;

/// Class is used of LivenessDetection process using iFace.framework. Core of this controller is to show user
/// small dot at specific position on screen and user need to look at this dot. This need to be repeated multiple times
/// and at the and you will receive callback about current state throught delegate.
SWIFT_CLASS("_TtC3DOT24LivenessCheck2Controller")
@interface LivenessCheck2Controller : UIViewController
@property (nonatomic, weak) id <LivenessCheck2ControllerDelegate> _Nullable delegate;
/// Init instance of LivenessCheck2Controller
/// \param configuration Liveness2Configuration with multiple configuration parameters
///
/// \param style In case you want to change colors/style of controller
///
+ (LivenessCheck2Controller * _Nonnull)createWithConfiguration:(Liveness2Configuration * _Nonnull)configuration style:(LivenessCheck2Style * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Should be called in case you want to start liveness detection process
- (void)startLivenessCheck;
/// Restars whole components of Controller to default state, removes animation and change dot position to center
- (void)restartTransitionView;
/// Should be called in case you want to stop liveness detection
- (void)stopLivenessCheck;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






@interface LivenessCheck2Controller (SWIFT_EXTENSION(DOT))
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end





enum LivenessContextState : NSInteger;
@class SegmentImage;

/// Delegate protocol that need to be conformed by one of your class and used like delegate.
/// Informs user about changes in LivenessDetectionProcess
SWIFT_PROTOCOL("_TtP3DOT32LivenessCheck2ControllerDelegate_")
@protocol LivenessCheck2ControllerDelegate
/// Check if Liveness Check should start running on load
- (BOOL)livenessCheck2InitialStart:(LivenessCheck2Controller * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// Tells you that liveness check didn’t start, because of camera initialization failed
- (void)livenessCheck2CameraInitFailed:(LivenessCheck2Controller * _Nonnull)controller;
/// Tells you that state of liveness check has changed
- (void)livenessCheck2:(LivenessCheck2Controller * _Nonnull)controller livenessStateChanged:(enum LivenessContextState)state;
/// Tells you that liveness check did finish with score and captured frames from all segments
- (void)livenessCheck2:(LivenessCheck2Controller * _Nonnull)controller checkDoneWith:(float)score capturedSegmentImages:(NSArray<SegmentImage *> * _Nonnull)segmentImagesList;
/// Called when face capture has failed
- (void)livenessCheck2FaceCaptureFailed:(LivenessCheck2Controller * _Nonnull)controller;
/// Tells you that liveness check couldn’t be validated becouse you don’t have enought segments
- (void)livenessCheck2NoMoreSegments:(LivenessCheck2Controller * _Nonnull)controller;
/// Tells you that liveness check did failed, becouse no eyes on camera were detected
- (void)livenessCheck2NoEyesDetected:(LivenessCheck2Controller * _Nonnull)controller;
@optional
/// Tells you that you don’t have permission to use camera
- (void)livenessCheck2NoCameraPermission:(LivenessCheck2Controller * _Nonnull)controller;
@required
/// Called on face capture state change.
- (void)livenessCheck2:(LivenessCheck2Controller * _Nonnull)controller captureStateChanged:(enum FaceCaptureState)captureState withImage:(DOTImage * _Nullable)image;
/// Called when face capture has finished
- (void)livenessCheck2:(LivenessCheck2Controller * _Nonnull)controller didSuccess:(DetectedFace * _Nonnull)detectedFace;
@optional
/// Tells the delegate that the preview size has changed
- (void)livenessCheck2:(LivenessCheck2Controller * _Nonnull)controller previewSizeChanged:(CGSize)size;
- (void)livenessCheck2DidLoad:(LivenessCheck2Controller * _Nonnull)controller;
- (void)livenessCheck2WillDisappear:(LivenessCheck2Controller * _Nonnull)controller;
- (void)livenessCheck2DidDisappear:(LivenessCheck2Controller * _Nonnull)controller;
- (void)livenessCheck2WillAppear:(LivenessCheck2Controller * _Nonnull)controller;
- (void)livenessCheck2DidAppear:(LivenessCheck2Controller * _Nonnull)controller;
@end


SWIFT_CLASS("_TtC3DOT19LivenessCheck2Style")
@interface LivenessCheck2Style : NSObject
@property (nonatomic, strong) UIFont * _Nonnull font;
@property (nonatomic, strong) UIColor * _Nonnull hintText;
@property (nonatomic, strong) UIColor * _Nonnull hintBubble;
@property (nonatomic, strong) UIColor * _Nonnull background;
@property (nonatomic, strong) UIColor * _Nonnull overlayBackground;
@property (nonatomic, strong) UIColor * _Nonnull maskBackground;
@property (nonatomic, strong) UIColor * _Nonnull dotColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHintText:(UIColor * _Nonnull)hintText hintBubble:(UIColor * _Nonnull)hintBubble background:(UIColor * _Nonnull)background overlayBackground:(UIColor * _Nonnull)overlayBackground maskBackground:(UIColor * _Nonnull)maskBackground font:(UIFont * _Nonnull)font dotColor:(UIColor * _Nonnull)dotColor OBJC_DESIGNATED_INITIALIZER;
@end

@protocol LivenessCheckControllerDelegate;
@class LivenessConfiguration;
@class LivenessCheckStyle;

/// Class is used of LivenessDetection process using iFace.framework. Core of this controller is to show user
/// small dot at specific position on screen and user need to look at this dot. This need to be repeated multiple times
/// and at the and you will receive callback about current state throught delegate.
SWIFT_CLASS("_TtC3DOT23LivenessCheckController")
@interface LivenessCheckController : UIViewController
@property (nonatomic, weak) id <LivenessCheckControllerDelegate> _Nullable delegate;
/// Init instance of LivenessDetectionController
/// \param configuration LivenessConfiguration with multiple configuration parameters
///
/// \param style In case you want to change colors/style of controller
///
+ (LivenessCheckController * _Nonnull)createWithConfiguration:(LivenessConfiguration * _Nonnull)configuration style:(LivenessCheckStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Should be called in case you want to start liveness detection process
- (void)startLivenessCheck;
/// Restars whole components of Controller to default state, removes animation and change dot position to center
- (void)restartTransitionView;
/// Should be called in case you want to stop liveness detection
- (void)stopLivenessCheck;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






@interface LivenessCheckController (SWIFT_EXTENSION(DOT))
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
@end




/// Delegate protocol that need to be conformed by one of your class and used like delegate.
/// Informs user about changes in LivenessDetectionProcess
SWIFT_PROTOCOL("_TtP3DOT31LivenessCheckControllerDelegate_")
@protocol LivenessCheckControllerDelegate
/// Check if Liveness Check should start running on load
- (BOOL)livenessCheckInitialStart:(LivenessCheckController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// Tells you that liveness check didn’t start, because of camera initialization failed
- (void)livenessCheckCameraInitFailed:(LivenessCheckController * _Nonnull)controller;
/// Tells you that state of liveness check has changed
- (void)livenessCheck:(LivenessCheckController * _Nonnull)controller stateChanged:(enum LivenessContextState)state;
/// Tells you that liveness check did finish with score and captured frames from all segments
- (void)livenessCheck:(LivenessCheckController * _Nonnull)controller checkDoneWith:(float)score capturedSegmentImages:(NSArray<SegmentImage *> * _Nonnull)segmentImagesList;
/// Tells you that liveness check couldn’t be validated becouse you don’t have enought segments
- (void)livenessCheckNoMoreSegments:(LivenessCheckController * _Nonnull)controller;
/// Tells you that liveness check did failed, becouse no eyes on camera were detected
- (void)livenessCheckNoEyesDetected:(LivenessCheckController * _Nonnull)controller;
@optional
/// Tells you that you don’t have permission to use camera
- (void)livenessCheckNoCameraPermission:(LivenessCheckController * _Nonnull)controller;
- (void)livenessCheckDidLoad:(LivenessCheckController * _Nonnull)controller;
- (void)livenessCheckWillDisappear:(LivenessCheckController * _Nonnull)controller;
- (void)livenessCheckDidDisappear:(LivenessCheckController * _Nonnull)controller;
- (void)livenessCheckWillAppear:(LivenessCheckController * _Nonnull)controller;
- (void)livenessCheckDidAppear:(LivenessCheckController * _Nonnull)controller;
@end


SWIFT_CLASS("_TtC3DOT18LivenessCheckStyle")
@interface LivenessCheckStyle : NSObject
@property (nonatomic, strong) UIFont * _Nonnull font;
@property (nonatomic, strong) UIColor * _Nonnull hintText;
@property (nonatomic, strong) UIColor * _Nonnull hintBubble;
@property (nonatomic, strong) UIColor * _Nonnull background;
@property (nonatomic, strong) UIColor * _Nonnull dotColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHintText:(UIColor * _Nonnull)hintText hintBubble:(UIColor * _Nonnull)hintBubble background:(UIColor * _Nonnull)background font:(UIFont * _Nonnull)font dotColor:(UIColor * _Nonnull)dotColor OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC3DOT21LivenessConfiguration")
@interface LivenessConfiguration : NSObject
@property (nonatomic) enum TransitionType transitionType;
/// Default value is nil
@property (nonatomic, copy) NSArray<DOTSegment *> * _Nullable segments;
/// Default value: 0.34
@property (nonatomic) double maxFaceSizeRatio;
/// Default value: 0.1
@property (nonatomic) double minFaceSizeRatio;
/// Default value: 4
@property (nonatomic) NSInteger minValidSegmentsCount;
/// Default value: 50
@property (nonatomic) CGFloat dotSize;
/// Default value: nil
@property (nonatomic, strong) UIImage * _Nullable dotImage;
/// Default value: 0.7
@property (nonatomic) double proximityTolerance;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType segments:(NSArray<DOTSegment *> * _Nullable)segments minValidSegmentsCount:(NSInteger)minValidSegmentsCount maxFaceSizeRatio:(double)maxFaceSizeRatio minFaceSizeRatio:(double)minFaceSizeRatio dotSize:(NSInteger)dotSize dotImage:(UIImage * _Nullable)dotImage proximityTolerance:(double)proximityTolerance OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTransitionType:(enum TransitionType)transitionType builderBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(LivenessConfiguration * _Nonnull))builderBlock OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT15LivenessContext")
@interface LivenessContext : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







typedef SWIFT_ENUM(NSInteger, LivenessContextState, open) {
  LivenessContextStateOk = 0,
  LivenessContextStateNoFace = 1,
  LivenessContextStateLost = 2,
  LivenessContextStateLowQuality = 3,
  LivenessContextStateTooClose = 4,
  LivenessContextStateTooFar = 5,
};

@class AVCaptureVideoPreviewLayer;

SWIFT_CLASS("_TtC3DOT11PreviewView")
@interface PreviewView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// Convenience wrapper to get layer as its statically known type.
@property (nonatomic, readonly, strong) AVCaptureVideoPreviewLayer * _Nonnull videoPreviewLayer;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC3DOT9Rectangle")
@interface Rectangle : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT12SegmentImage")
@interface SegmentImage : NSObject
@property (nonatomic, readonly, strong) DOTImage * _Nonnull dotImage;
@property (nonatomic, readonly) BOOL isValid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TemplateInfo;

SWIFT_CLASS("_TtC3DOT8Template")
@interface Template : NSObject
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull data;
@property (nonatomic, strong) TemplateInfo * _Nullable info;
- (nonnull instancetype)initWithData:(NSArray<NSNumber *> * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithData:(NSArray<NSNumber *> * _Nonnull)data info:(TemplateInfo * _Nullable)info OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT12TemplateInfo")
@interface TemplateInfo : NSObject
@property (nonatomic, readonly) NSInteger minor;
@property (nonatomic, readonly) NSInteger major;
@property (nonatomic, readonly) NSInteger quality;
- (nonnull instancetype)initWithMinor:(NSInteger)minor major:(NSInteger)major quality:(NSInteger)quality OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC3DOT16TemplateVerifier")
@interface TemplateVerifier : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Verify reference and probe face templates
/// \param referenceTemplate Template
///
/// \param probeTemplate Template
///
///
/// returns:
/// Score
- (NSNumber * _Nullable)matchWithReferenceTemplate:(Template * _Nonnull)referenceTemplate probeTemplate:(Template * _Nonnull)probeTemplate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, TransitionType, open) {
  TransitionTypeMove = 0,
  TransitionTypeFade = 1,
};





















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
